"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _CaseInsensitiveObject_keys, _CaseInsensitiveObject_insensitiveKeys;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaseInsensitiveObject = void 0;
function CaseInsensitiveObjectFactory(value) {
    return new CaseInsensitiveObject(value);
}
exports.default = CaseInsensitiveObjectFactory;
class CaseInsensitiveObject {
    constructor(value) {
        _CaseInsensitiveObject_keys.set(this, []);
        _CaseInsensitiveObject_insensitiveKeys.set(this, []);
        const proxyObject = new Proxy(value, {
            set: (target, prop, value, receiver) => {
                const newProp = typeof prop == 'string' ? prop.toLowerCase() : prop;
                const insensitiveKeyIndex = __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").indexOf(newProp);
                if (insensitiveKeyIndex >= 0) {
                    const returnValue = Reflect.set(target, __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f")[insensitiveKeyIndex], value, receiver);
                    if (!returnValue && Object.isFrozen(target)) {
                        throw new TypeError(`Cannot add property ${prop}, object is not extensible`);
                    }
                    return returnValue;
                }
                else {
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f").push(prop);
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").push(newProp);
                    return Reflect.set(target, prop, value, receiver);
                }
            },
            get: (target, prop, receiver) => {
                const newProp = typeof prop == 'string' ? prop.toLowerCase() : prop;
                const returnValue = Reflect.get(target, __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f")[__classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").indexOf(newProp)], receiver);
                return returnValue;
            },
            deleteProperty: (target, prop) => {
                const newProp = typeof prop == 'string' ? prop.toLowerCase() : prop;
                const insensitiveKeyIndex = __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").indexOf(newProp);
                let returnValue = true;
                if (insensitiveKeyIndex >= 0) {
                    returnValue = Reflect.deleteProperty(target, __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f")[insensitiveKeyIndex]);
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f").splice(insensitiveKeyIndex, 1);
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").splice(insensitiveKeyIndex, 1);
                }
                return returnValue;
            },
            defineProperty: (target, prop, descriptor) => {
                const newProp = typeof prop == 'string' ? prop.toLowerCase() : prop;
                const insensitiveKeyIndex = __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").indexOf(newProp);
                if (insensitiveKeyIndex >= 0) {
                    return Reflect.defineProperty(target, __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f")[insensitiveKeyIndex], descriptor);
                }
                else {
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_keys, "f").push(prop);
                    __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").push(newProp);
                    return Reflect.defineProperty(target, prop, descriptor);
                }
            },
            has: (target, prop) => {
                const newProp = typeof prop == 'string' ? prop.toLowerCase() : prop;
                const insensitiveKeyIndex = __classPrivateFieldGet(this, _CaseInsensitiveObject_insensitiveKeys, "f").indexOf(newProp);
                if (insensitiveKeyIndex >= 0) {
                    return true;
                }
                else {
                    return false;
                }
            },
        });
        __classPrivateFieldSet(this, _CaseInsensitiveObject_keys, Object.keys(value), "f");
        __classPrivateFieldSet(this, _CaseInsensitiveObject_insensitiveKeys, Object.keys(value).map((value) => typeof value == 'string' ? value.toLowerCase() : value), "f");
        return Object.assign(proxyObject, {});
    }
    static fromEntries(entries) {
        return new this(Object.fromEntries(entries));
    }
}
exports.CaseInsensitiveObject = CaseInsensitiveObject;
_CaseInsensitiveObject_keys = new WeakMap(), _CaseInsensitiveObject_insensitiveKeys = new WeakMap();
