import { parsePlaylistItemsReturn } from './playlists.types';
export declare function parseMenuPlaylists(data: Record<string, any> | null, result: Record<string, any>): void;
declare type FlexItem = {
    text: {
        runs: {
            text: string;
            navigationEndpoint: {
                watchEndpoint: {
                    videoId: string;
                    playlistId: string;
                };
                browseEndpoint: {
                    browseId: string;
                };
            };
        }[];
    };
};
export declare function getItemText(item: any, index: number, run_index?: number, none_if_absent?: boolean): string | null;
export declare function getFlexColumnItem(item: any, index: number): FlexItem | null;
export declare function getFixedColumnItem(item: {
    [x: string]: {
        [x: string]: {
            [x: string]: any;
        };
    };
}, index: number): any;
export declare function getBrowseId(item: Record<string, any>, index: string | number): null | any;
export declare function getContinuations(results: any, continuation_type: string | number, limit: number, requestFunc: (arg1: any) => Promise<Record<string, any>>, parse_func: (arg1: any) => any, ctokenPath?: string): Promise<Array<any>>;
export declare function getValidatedContinuations(results: any, continuation_type: any, limit: number, per_page: number, request_func: any, parse_func: any, ctoken_path?: string): Promise<any>;
export declare function getParsedContinuationItems(response: Record<string, any>, parseFunc: (arg0: any) => any, continuationType: string | number): any;
export declare function getContinuationString(ctoken: string): string;
export declare function resendRequestUntilParsedResponseIsValid<T extends {
    parsed: parsePlaylistItemsReturn;
    results: unknown;
}>(requestFunc: (additionalParams: any) => Promise<any>, request_additional_params: string | null, parse_func: (rawResponse: any) => T, validateFunc: (parsed: T) => boolean, max_retries: number): Promise<T>;
export declare function validateResponse(response: Record<string, any>, perPage: number, limit: number, currentCount: number): boolean;
export declare function validatePlaylistId(playlistId: string | null | undefined): string | null;
export { nav } from '@codyduong/nav';
export declare function findObjectByKey<T extends Array<Record<string, any>>>(objectList: T | null, key: string, nested?: string, isKey?: boolean): any;
export declare function getDotSeperatorIndex(runs: Record<string, any>[]): number;
